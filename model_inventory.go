/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the Inventory type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Inventory{}

// Inventory struct for Inventory
type Inventory struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	ProjectId *int32 `json:"project_id,omitempty"`
	Inventory *string `json:"inventory,omitempty"`
	SshKeyId *int32 `json:"ssh_key_id,omitempty"`
	BecomeKeyId *int32 `json:"become_key_id,omitempty"`
	RepositoryId *int32 `json:"repository_id,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewInventory instantiates a new Inventory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInventory() *Inventory {
	this := Inventory{}
	return &this
}

// NewInventoryWithDefaults instantiates a new Inventory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInventoryWithDefaults() *Inventory {
	this := Inventory{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Inventory) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Inventory) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *Inventory) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Inventory) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Inventory) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Inventory) SetName(v string) {
	o.Name = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *Inventory) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *Inventory) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *Inventory) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetInventory returns the Inventory field value if set, zero value otherwise.
func (o *Inventory) GetInventory() string {
	if o == nil || IsNil(o.Inventory) {
		var ret string
		return ret
	}
	return *o.Inventory
}

// GetInventoryOk returns a tuple with the Inventory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetInventoryOk() (*string, bool) {
	if o == nil || IsNil(o.Inventory) {
		return nil, false
	}
	return o.Inventory, true
}

// HasInventory returns a boolean if a field has been set.
func (o *Inventory) HasInventory() bool {
	if o != nil && !IsNil(o.Inventory) {
		return true
	}

	return false
}

// SetInventory gets a reference to the given string and assigns it to the Inventory field.
func (o *Inventory) SetInventory(v string) {
	o.Inventory = &v
}

// GetSshKeyId returns the SshKeyId field value if set, zero value otherwise.
func (o *Inventory) GetSshKeyId() int32 {
	if o == nil || IsNil(o.SshKeyId) {
		var ret int32
		return ret
	}
	return *o.SshKeyId
}

// GetSshKeyIdOk returns a tuple with the SshKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetSshKeyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.SshKeyId) {
		return nil, false
	}
	return o.SshKeyId, true
}

// HasSshKeyId returns a boolean if a field has been set.
func (o *Inventory) HasSshKeyId() bool {
	if o != nil && !IsNil(o.SshKeyId) {
		return true
	}

	return false
}

// SetSshKeyId gets a reference to the given int32 and assigns it to the SshKeyId field.
func (o *Inventory) SetSshKeyId(v int32) {
	o.SshKeyId = &v
}

// GetBecomeKeyId returns the BecomeKeyId field value if set, zero value otherwise.
func (o *Inventory) GetBecomeKeyId() int32 {
	if o == nil || IsNil(o.BecomeKeyId) {
		var ret int32
		return ret
	}
	return *o.BecomeKeyId
}

// GetBecomeKeyIdOk returns a tuple with the BecomeKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetBecomeKeyIdOk() (*int32, bool) {
	if o == nil || IsNil(o.BecomeKeyId) {
		return nil, false
	}
	return o.BecomeKeyId, true
}

// HasBecomeKeyId returns a boolean if a field has been set.
func (o *Inventory) HasBecomeKeyId() bool {
	if o != nil && !IsNil(o.BecomeKeyId) {
		return true
	}

	return false
}

// SetBecomeKeyId gets a reference to the given int32 and assigns it to the BecomeKeyId field.
func (o *Inventory) SetBecomeKeyId(v int32) {
	o.BecomeKeyId = &v
}

// GetRepositoryId returns the RepositoryId field value if set, zero value otherwise.
func (o *Inventory) GetRepositoryId() int32 {
	if o == nil || IsNil(o.RepositoryId) {
		var ret int32
		return ret
	}
	return *o.RepositoryId
}

// GetRepositoryIdOk returns a tuple with the RepositoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetRepositoryIdOk() (*int32, bool) {
	if o == nil || IsNil(o.RepositoryId) {
		return nil, false
	}
	return o.RepositoryId, true
}

// HasRepositoryId returns a boolean if a field has been set.
func (o *Inventory) HasRepositoryId() bool {
	if o != nil && !IsNil(o.RepositoryId) {
		return true
	}

	return false
}

// SetRepositoryId gets a reference to the given int32 and assigns it to the RepositoryId field.
func (o *Inventory) SetRepositoryId(v int32) {
	o.RepositoryId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Inventory) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inventory) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Inventory) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Inventory) SetType(v string) {
	o.Type = &v
}

func (o Inventory) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Inventory) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Inventory) {
		toSerialize["inventory"] = o.Inventory
	}
	if !IsNil(o.SshKeyId) {
		toSerialize["ssh_key_id"] = o.SshKeyId
	}
	if !IsNil(o.BecomeKeyId) {
		toSerialize["become_key_id"] = o.BecomeKeyId
	}
	if !IsNil(o.RepositoryId) {
		toSerialize["repository_id"] = o.RepositoryId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableInventory struct {
	value *Inventory
	isSet bool
}

func (v NullableInventory) Get() *Inventory {
	return v.value
}

func (v *NullableInventory) Set(val *Inventory) {
	v.value = val
	v.isSet = true
}

func (v NullableInventory) IsSet() bool {
	return v.isSet
}

func (v *NullableInventory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInventory(val *Inventory) *NullableInventory {
	return &NullableInventory{value: val, isSet: true}
}

func (v NullableInventory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInventory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


