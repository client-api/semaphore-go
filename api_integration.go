/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


type IntegrationAPI interface {

	/*
	ProjectProjectIdIntegrationsIntegrationIdMatchersGet Get Integration Matcher linked to integration extractor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdMatchersGet(ctx context.Context, projectId int32, integrationId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest

	// ProjectProjectIdIntegrationsIntegrationIdMatchersGetExecute executes the request
	//  @return []IntegrationMatcher
	ProjectProjectIdIntegrationsIntegrationIdMatchersGetExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest) ([]IntegrationMatcher, *http.Response, error)

	/*
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete Removes integration matcher

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@param matcherId matcher ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete(ctx context.Context, projectId int32, integrationId int32, matcherId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest

	// ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteExecute executes the request
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest) (*http.Response, error)

	/*
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut Updates Integration Matcher

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@param matcherId matcher ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut(ctx context.Context, projectId int32, integrationId int32, matcherId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest

	// ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutExecute executes the request
	ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest) (*http.Response, error)

	/*
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete Removes integration extract value

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@param extractvalueId extractValue ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete(ctx context.Context, projectId int32, integrationId int32, extractvalueId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest

	// ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteExecute executes the request
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest) (*http.Response, error)

	/*
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut Updates Integration ExtractValue

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@param extractvalueId extractValue ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut(ctx context.Context, projectId int32, integrationId int32, extractvalueId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest

	// ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutExecute executes the request
	ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest) (*http.Response, error)

	/*
	ProjectProjectIdIntegrationsIntegrationIdValuesGet Get Integration Extracted Values linked to integration extractor

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param projectId Project ID
	@param integrationId integration ID
	@return ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest
	*/
	ProjectProjectIdIntegrationsIntegrationIdValuesGet(ctx context.Context, projectId int32, integrationId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest

	// ProjectProjectIdIntegrationsIntegrationIdValuesGetExecute executes the request
	//  @return []IntegrationExtractValue
	ProjectProjectIdIntegrationsIntegrationIdValuesGetExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest) ([]IntegrationExtractValue, *http.Response, error)
}

// IntegrationAPIService IntegrationAPI service
type IntegrationAPIService service

type ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest) Execute() ([]IntegrationMatcher, *http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdMatchersGetExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdMatchersGet Get Integration Matcher linked to integration extractor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersGet(ctx context.Context, projectId int32, integrationId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
	}
}

// Execute executes the request
//  @return []IntegrationMatcher
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersGetExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersGetRequest) ([]IntegrationMatcher, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntegrationMatcher
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdMatchersGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/matchers"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
	matcherId int32
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete Removes integration matcher

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @param matcherId matcher ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete(ctx context.Context, projectId int32, integrationId int32, matcherId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
		matcherId: matcherId,
	}
}

// Execute executes the request
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"matcher_id"+"}", url.PathEscape(parameterValueToString(r.matcherId, "matcherId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
	matcherId int32
	integrationMatcher *IntegrationMatcherRequest
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest) IntegrationMatcher(integrationMatcher IntegrationMatcherRequest) ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest {
	r.integrationMatcher = &integrationMatcher
	return r
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut Updates Integration Matcher

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @param matcherId matcher ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut(ctx context.Context, projectId int32, integrationId int32, matcherId int32) ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
		matcherId: matcherId,
	}
}

// Execute executes the request
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutExecute(r ApiProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"matcher_id"+"}", url.PathEscape(parameterValueToString(r.matcherId, "matcherId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integrationMatcher == nil {
		return nil, reportError("integrationMatcher is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.integrationMatcher
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
	extractvalueId int32
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete Removes integration extract value

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @param extractvalueId extractValue ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete(ctx context.Context, projectId int32, integrationId int32, extractvalueId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
		extractvalueId: extractvalueId,
	}
}

// Execute executes the request
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extractvalue_id"+"}", url.PathEscape(parameterValueToString(r.extractvalueId, "extractvalueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
	extractvalueId int32
	integrationExtractValue *IntegrationExtractValueRequest
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest) IntegrationExtractValue(integrationExtractValue IntegrationExtractValueRequest) ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest {
	r.integrationExtractValue = &integrationExtractValue
	return r
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest) Execute() (*http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut Updates Integration ExtractValue

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @param extractvalueId extractValue ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut(ctx context.Context, projectId int32, integrationId int32, extractvalueId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
		extractvalueId: extractvalueId,
	}
}

// Execute executes the request
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPutRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"extractvalue_id"+"}", url.PathEscape(parameterValueToString(r.extractvalueId, "extractvalueId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.integrationExtractValue == nil {
		return nil, reportError("integrationExtractValue is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.integrationExtractValue
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest struct {
	ctx context.Context
	ApiService IntegrationAPI
	projectId int32
	integrationId int32
}

func (r ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest) Execute() ([]IntegrationExtractValue, *http.Response, error) {
	return r.ApiService.ProjectProjectIdIntegrationsIntegrationIdValuesGetExecute(r)
}

/*
ProjectProjectIdIntegrationsIntegrationIdValuesGet Get Integration Extracted Values linked to integration extractor

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param projectId Project ID
 @param integrationId integration ID
 @return ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest
*/
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesGet(ctx context.Context, projectId int32, integrationId int32) ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest {
	return ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest{
		ApiService: a,
		ctx: ctx,
		projectId: projectId,
		integrationId: integrationId,
	}
}

// Execute executes the request
//  @return []IntegrationExtractValue
func (a *IntegrationAPIService) ProjectProjectIdIntegrationsIntegrationIdValuesGetExecute(r ApiProjectProjectIdIntegrationsIntegrationIdValuesGetRequest) ([]IntegrationExtractValue, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []IntegrationExtractValue
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "IntegrationAPIService.ProjectProjectIdIntegrationsIntegrationIdValuesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/project/{project_id}/integrations/{integration_id}/values"
	localVarPath = strings.Replace(localVarPath, "{"+"project_id"+"}", url.PathEscape(parameterValueToString(r.projectId, "projectId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"integration_id"+"}", url.PathEscape(parameterValueToString(r.integrationId, "integrationId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "text/plain; charset=utf-8"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["cookie"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Cookie"] = key
			}
		}
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
