/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
	"time"
)

// checks if the TaskOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskOutput{}

// TaskOutput struct for TaskOutput
type TaskOutput struct {
	TaskId *int32 `json:"task_id,omitempty"`
	Time *time.Time `json:"time,omitempty"`
	Output *string `json:"output,omitempty"`
}

// NewTaskOutput instantiates a new TaskOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskOutput() *TaskOutput {
	this := TaskOutput{}
	return &this
}

// NewTaskOutputWithDefaults instantiates a new TaskOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskOutputWithDefaults() *TaskOutput {
	this := TaskOutput{}
	return &this
}

// GetTaskId returns the TaskId field value if set, zero value otherwise.
func (o *TaskOutput) GetTaskId() int32 {
	if o == nil || IsNil(o.TaskId) {
		var ret int32
		return ret
	}
	return *o.TaskId
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskOutput) GetTaskIdOk() (*int32, bool) {
	if o == nil || IsNil(o.TaskId) {
		return nil, false
	}
	return o.TaskId, true
}

// HasTaskId returns a boolean if a field has been set.
func (o *TaskOutput) HasTaskId() bool {
	if o != nil && !IsNil(o.TaskId) {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given int32 and assigns it to the TaskId field.
func (o *TaskOutput) SetTaskId(v int32) {
	o.TaskId = &v
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *TaskOutput) GetTime() time.Time {
	if o == nil || IsNil(o.Time) {
		var ret time.Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskOutput) GetTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Time) {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *TaskOutput) HasTime() bool {
	if o != nil && !IsNil(o.Time) {
		return true
	}

	return false
}

// SetTime gets a reference to the given time.Time and assigns it to the Time field.
func (o *TaskOutput) SetTime(v time.Time) {
	o.Time = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *TaskOutput) GetOutput() string {
	if o == nil || IsNil(o.Output) {
		var ret string
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskOutput) GetOutputOk() (*string, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *TaskOutput) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given string and assigns it to the Output field.
func (o *TaskOutput) SetOutput(v string) {
	o.Output = &v
}

func (o TaskOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TaskId) {
		toSerialize["task_id"] = o.TaskId
	}
	if !IsNil(o.Time) {
		toSerialize["time"] = o.Time
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	return toSerialize, nil
}

type NullableTaskOutput struct {
	value *TaskOutput
	isSet bool
}

func (v NullableTaskOutput) Get() *TaskOutput {
	return v.value
}

func (v *NullableTaskOutput) Set(val *TaskOutput) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskOutput) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskOutput(val *TaskOutput) *NullableTaskOutput {
	return &NullableTaskOutput{value: val, isSet: true}
}

func (v NullableTaskOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


