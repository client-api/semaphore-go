/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ProjectProjectIdRoleGet200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectProjectIdRoleGet200Response{}

// ProjectProjectIdRoleGet200Response struct for ProjectProjectIdRoleGet200Response
type ProjectProjectIdRoleGet200Response struct {
	Role *string `json:"role,omitempty"`
	Permissions *float32 `json:"permissions,omitempty"`
}

// NewProjectProjectIdRoleGet200Response instantiates a new ProjectProjectIdRoleGet200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectProjectIdRoleGet200Response() *ProjectProjectIdRoleGet200Response {
	this := ProjectProjectIdRoleGet200Response{}
	return &this
}

// NewProjectProjectIdRoleGet200ResponseWithDefaults instantiates a new ProjectProjectIdRoleGet200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectProjectIdRoleGet200ResponseWithDefaults() *ProjectProjectIdRoleGet200Response {
	this := ProjectProjectIdRoleGet200Response{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *ProjectProjectIdRoleGet200Response) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectIdRoleGet200Response) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *ProjectProjectIdRoleGet200Response) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *ProjectProjectIdRoleGet200Response) SetRole(v string) {
	o.Role = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ProjectProjectIdRoleGet200Response) GetPermissions() float32 {
	if o == nil || IsNil(o.Permissions) {
		var ret float32
		return ret
	}
	return *o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectProjectIdRoleGet200Response) GetPermissionsOk() (*float32, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ProjectProjectIdRoleGet200Response) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given float32 and assigns it to the Permissions field.
func (o *ProjectProjectIdRoleGet200Response) SetPermissions(v float32) {
	o.Permissions = &v
}

func (o ProjectProjectIdRoleGet200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectProjectIdRoleGet200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableProjectProjectIdRoleGet200Response struct {
	value *ProjectProjectIdRoleGet200Response
	isSet bool
}

func (v NullableProjectProjectIdRoleGet200Response) Get() *ProjectProjectIdRoleGet200Response {
	return v.value
}

func (v *NullableProjectProjectIdRoleGet200Response) Set(val *ProjectProjectIdRoleGet200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectProjectIdRoleGet200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectProjectIdRoleGet200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectProjectIdRoleGet200Response(val *ProjectProjectIdRoleGet200Response) *NullableProjectProjectIdRoleGet200Response {
	return &NullableProjectProjectIdRoleGet200Response{value: val, isSet: true}
}

func (v NullableProjectProjectIdRoleGet200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectProjectIdRoleGet200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


