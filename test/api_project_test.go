/*
Semaphore API

Testing ProjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package semaphore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/client-api/semaphore-go"
)

func Test_semaphore_ProjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProjectAPIService ProjectProjectIdBackupGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdBackupGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdDelete(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEnvironmentEnvironmentIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var environmentId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEnvironmentEnvironmentIdDelete(context.Background(), projectId, environmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEnvironmentEnvironmentIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var environmentId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEnvironmentEnvironmentIdGet(context.Background(), projectId, environmentId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEnvironmentEnvironmentIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var environmentId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEnvironmentEnvironmentIdPut(context.Background(), projectId, environmentId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEnvironmentGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEnvironmentGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEnvironmentPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEnvironmentPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdEventsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdEventsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsIntegrationIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsIntegrationIdDelete(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsIntegrationIdMatchersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsIntegrationIdMatchersPost(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsIntegrationIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsIntegrationIdPut(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsIntegrationIdValuesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsIntegrationIdValuesPost(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdIntegrationsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdIntegrationsPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdInventoryGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdInventoryGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdInventoryInventoryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var inventoryId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdInventoryInventoryIdDelete(context.Background(), projectId, inventoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdInventoryInventoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var inventoryId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdInventoryInventoryIdGet(context.Background(), projectId, inventoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdInventoryInventoryIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var inventoryId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdInventoryInventoryIdPut(context.Background(), projectId, inventoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdInventoryPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdInventoryPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdKeysGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdKeysGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdKeysKeyIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var keyId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdKeysKeyIdDelete(context.Background(), projectId, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdKeysKeyIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var keyId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdKeysKeyIdPut(context.Background(), projectId, keyId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdKeysPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdKeysPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdPut(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRepositoriesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRepositoriesGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRepositoriesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRepositoriesPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRepositoriesRepositoryIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var repositoryId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRepositoriesRepositoryIdDelete(context.Background(), projectId, repositoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRepositoriesRepositoryIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var repositoryId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRepositoriesRepositoryIdGet(context.Background(), projectId, repositoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRepositoriesRepositoryIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var repositoryId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRepositoriesRepositoryIdPut(context.Background(), projectId, repositoryId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdRoleGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdRoleGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksLastGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksLastGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksTaskIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var taskId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksTaskIdDelete(context.Background(), projectId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksTaskIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var taskId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksTaskIdGet(context.Background(), projectId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksTaskIdOutputGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var taskId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksTaskIdOutputGet(context.Background(), projectId, taskId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTasksTaskIdStopPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var taskId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTasksTaskIdStopPost(context.Background(), projectId, taskId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTemplatesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTemplatesGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTemplatesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTemplatesPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTemplatesTemplateIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var templateId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTemplatesTemplateIdDelete(context.Background(), projectId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTemplatesTemplateIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var templateId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTemplatesTemplateIdGet(context.Background(), projectId, templateId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdTemplatesTemplateIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var templateId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdTemplatesTemplateIdPut(context.Background(), projectId, templateId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdUsersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdUsersGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdUsersPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdUsersPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdUsersUserIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var userId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdUsersUserIdDelete(context.Background(), projectId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdUsersUserIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var userId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdUsersUserIdPut(context.Background(), projectId, userId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdViewsGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdViewsGet(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdViewsPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdViewsPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdViewsViewIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var viewId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdViewsViewIdDelete(context.Background(), projectId, viewId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdViewsViewIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var viewId int32

		resp, httpRes, err := apiClient.ProjectAPI.ProjectProjectIdViewsViewIdGet(context.Background(), projectId, viewId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProjectAPIService ProjectProjectIdViewsViewIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var viewId int32

		httpRes, err := apiClient.ProjectAPI.ProjectProjectIdViewsViewIdPut(context.Background(), projectId, viewId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
