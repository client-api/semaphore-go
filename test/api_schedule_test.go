/*
Semaphore API

Testing ScheduleAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package semaphore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/client-api/semaphore-go"
)

func Test_semaphore_ScheduleAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ScheduleAPIService ProjectProjectIdSchedulesPost", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32

		resp, httpRes, err := apiClient.ScheduleAPI.ProjectProjectIdSchedulesPost(context.Background(), projectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduleAPIService ProjectProjectIdSchedulesScheduleIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var scheduleId int32

		httpRes, err := apiClient.ScheduleAPI.ProjectProjectIdSchedulesScheduleIdDelete(context.Background(), projectId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduleAPIService ProjectProjectIdSchedulesScheduleIdGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var scheduleId int32

		resp, httpRes, err := apiClient.ScheduleAPI.ProjectProjectIdSchedulesScheduleIdGet(context.Background(), projectId, scheduleId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ScheduleAPIService ProjectProjectIdSchedulesScheduleIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var scheduleId int32

		httpRes, err := apiClient.ScheduleAPI.ProjectProjectIdSchedulesScheduleIdPut(context.Background(), projectId, scheduleId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
