/*
Semaphore API

Testing IntegrationAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package semaphore

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/client-api/semaphore-go"
)

func Test_semaphore_IntegrationAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdMatchersGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		resp, httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdMatchersGet(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32
		var matcherId int32

		httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdDelete(context.Background(), projectId, integrationId, matcherId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32
		var matcherId int32

		httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdMatchersMatcherIdPut(context.Background(), projectId, integrationId, matcherId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32
		var extractvalueId int32

		httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdDelete(context.Background(), projectId, integrationId, extractvalueId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32
		var extractvalueId int32

		httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdValuesExtractvalueIdPut(context.Background(), projectId, integrationId, extractvalueId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test IntegrationAPIService ProjectProjectIdIntegrationsIntegrationIdValuesGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var projectId int32
		var integrationId int32

		resp, httpRes, err := apiClient.IntegrationAPI.ProjectProjectIdIntegrationsIntegrationIdValuesGet(context.Background(), projectId, integrationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
