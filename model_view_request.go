/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ViewRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewRequest{}

// ViewRequest struct for ViewRequest
type ViewRequest struct {
	Title *string `json:"title,omitempty"`
	ProjectId *int32 `json:"project_id,omitempty"`
	Position *int32 `json:"position,omitempty"`
}

// NewViewRequest instantiates a new ViewRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewRequest() *ViewRequest {
	this := ViewRequest{}
	return &this
}

// NewViewRequestWithDefaults instantiates a new ViewRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewRequestWithDefaults() *ViewRequest {
	this := ViewRequest{}
	return &this
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *ViewRequest) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRequest) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *ViewRequest) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *ViewRequest) SetTitle(v string) {
	o.Title = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *ViewRequest) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *ViewRequest) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *ViewRequest) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ViewRequest) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewRequest) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ViewRequest) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ViewRequest) SetPosition(v int32) {
	o.Position = &v
}

func (o ViewRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	return toSerialize, nil
}

type NullableViewRequest struct {
	value *ViewRequest
	isSet bool
}

func (v NullableViewRequest) Get() *ViewRequest {
	return v.value
}

func (v *NullableViewRequest) Set(val *ViewRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableViewRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableViewRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewRequest(val *ViewRequest) *NullableViewRequest {
	return &NullableViewRequest{value: val, isSet: true}
}

func (v NullableViewRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


