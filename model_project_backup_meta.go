/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ProjectBackupMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBackupMeta{}

// ProjectBackupMeta struct for ProjectBackupMeta
type ProjectBackupMeta struct {
	Name *string `json:"name,omitempty"`
	Alert *bool `json:"alert,omitempty"`
	MaxParallelTasks *int32 `json:"max_parallel_tasks,omitempty"`
}

// NewProjectBackupMeta instantiates a new ProjectBackupMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBackupMeta() *ProjectBackupMeta {
	this := ProjectBackupMeta{}
	return &this
}

// NewProjectBackupMetaWithDefaults instantiates a new ProjectBackupMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBackupMetaWithDefaults() *ProjectBackupMeta {
	this := ProjectBackupMeta{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectBackupMeta) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupMeta) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectBackupMeta) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectBackupMeta) SetName(v string) {
	o.Name = &v
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *ProjectBackupMeta) GetAlert() bool {
	if o == nil || IsNil(o.Alert) {
		var ret bool
		return ret
	}
	return *o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupMeta) GetAlertOk() (*bool, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *ProjectBackupMeta) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given bool and assigns it to the Alert field.
func (o *ProjectBackupMeta) SetAlert(v bool) {
	o.Alert = &v
}

// GetMaxParallelTasks returns the MaxParallelTasks field value if set, zero value otherwise.
func (o *ProjectBackupMeta) GetMaxParallelTasks() int32 {
	if o == nil || IsNil(o.MaxParallelTasks) {
		var ret int32
		return ret
	}
	return *o.MaxParallelTasks
}

// GetMaxParallelTasksOk returns a tuple with the MaxParallelTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupMeta) GetMaxParallelTasksOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxParallelTasks) {
		return nil, false
	}
	return o.MaxParallelTasks, true
}

// HasMaxParallelTasks returns a boolean if a field has been set.
func (o *ProjectBackupMeta) HasMaxParallelTasks() bool {
	if o != nil && !IsNil(o.MaxParallelTasks) {
		return true
	}

	return false
}

// SetMaxParallelTasks gets a reference to the given int32 and assigns it to the MaxParallelTasks field.
func (o *ProjectBackupMeta) SetMaxParallelTasks(v int32) {
	o.MaxParallelTasks = &v
}

func (o ProjectBackupMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBackupMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.MaxParallelTasks) {
		toSerialize["max_parallel_tasks"] = o.MaxParallelTasks
	}
	return toSerialize, nil
}

type NullableProjectBackupMeta struct {
	value *ProjectBackupMeta
	isSet bool
}

func (v NullableProjectBackupMeta) Get() *ProjectBackupMeta {
	return v.value
}

func (v *NullableProjectBackupMeta) Set(val *ProjectBackupMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBackupMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBackupMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBackupMeta(val *ProjectBackupMeta) *NullableProjectBackupMeta {
	return &NullableProjectBackupMeta{value: val, isSet: true}
}

func (v NullableProjectBackupMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBackupMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


