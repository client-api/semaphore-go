/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ProjectBackupViewsInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBackupViewsInner{}

// ProjectBackupViewsInner struct for ProjectBackupViewsInner
type ProjectBackupViewsInner struct {
	Name *string `json:"name,omitempty"`
	Position *int32 `json:"position,omitempty"`
}

// NewProjectBackupViewsInner instantiates a new ProjectBackupViewsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBackupViewsInner() *ProjectBackupViewsInner {
	this := ProjectBackupViewsInner{}
	return &this
}

// NewProjectBackupViewsInnerWithDefaults instantiates a new ProjectBackupViewsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBackupViewsInnerWithDefaults() *ProjectBackupViewsInner {
	this := ProjectBackupViewsInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectBackupViewsInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupViewsInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectBackupViewsInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectBackupViewsInner) SetName(v string) {
	o.Name = &v
}

// GetPosition returns the Position field value if set, zero value otherwise.
func (o *ProjectBackupViewsInner) GetPosition() int32 {
	if o == nil || IsNil(o.Position) {
		var ret int32
		return ret
	}
	return *o.Position
}

// GetPositionOk returns a tuple with the Position field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupViewsInner) GetPositionOk() (*int32, bool) {
	if o == nil || IsNil(o.Position) {
		return nil, false
	}
	return o.Position, true
}

// HasPosition returns a boolean if a field has been set.
func (o *ProjectBackupViewsInner) HasPosition() bool {
	if o != nil && !IsNil(o.Position) {
		return true
	}

	return false
}

// SetPosition gets a reference to the given int32 and assigns it to the Position field.
func (o *ProjectBackupViewsInner) SetPosition(v int32) {
	o.Position = &v
}

func (o ProjectBackupViewsInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBackupViewsInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Position) {
		toSerialize["position"] = o.Position
	}
	return toSerialize, nil
}

type NullableProjectBackupViewsInner struct {
	value *ProjectBackupViewsInner
	isSet bool
}

func (v NullableProjectBackupViewsInner) Get() *ProjectBackupViewsInner {
	return v.value
}

func (v *NullableProjectBackupViewsInner) Set(val *ProjectBackupViewsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBackupViewsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBackupViewsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBackupViewsInner(val *ProjectBackupViewsInner) *NullableProjectBackupViewsInner {
	return &NullableProjectBackupViewsInner{value: val, isSet: true}
}

func (v NullableProjectBackupViewsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBackupViewsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


