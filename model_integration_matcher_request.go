/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the IntegrationMatcherRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationMatcherRequest{}

// IntegrationMatcherRequest struct for IntegrationMatcherRequest
type IntegrationMatcherRequest struct {
	Name *string `json:"name,omitempty"`
	MatchType *string `json:"match_type,omitempty"`
	Method *string `json:"method,omitempty"`
	BodyDataType *string `json:"body_data_type,omitempty"`
	Key *string `json:"key,omitempty"`
	Value *string `json:"value,omitempty"`
}

// NewIntegrationMatcherRequest instantiates a new IntegrationMatcherRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationMatcherRequest() *IntegrationMatcherRequest {
	this := IntegrationMatcherRequest{}
	return &this
}

// NewIntegrationMatcherRequestWithDefaults instantiates a new IntegrationMatcherRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationMatcherRequestWithDefaults() *IntegrationMatcherRequest {
	this := IntegrationMatcherRequest{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *IntegrationMatcherRequest) SetName(v string) {
	o.Name = &v
}

// GetMatchType returns the MatchType field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetMatchType() string {
	if o == nil || IsNil(o.MatchType) {
		var ret string
		return ret
	}
	return *o.MatchType
}

// GetMatchTypeOk returns a tuple with the MatchType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetMatchTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MatchType) {
		return nil, false
	}
	return o.MatchType, true
}

// HasMatchType returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasMatchType() bool {
	if o != nil && !IsNil(o.MatchType) {
		return true
	}

	return false
}

// SetMatchType gets a reference to the given string and assigns it to the MatchType field.
func (o *IntegrationMatcherRequest) SetMatchType(v string) {
	o.MatchType = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *IntegrationMatcherRequest) SetMethod(v string) {
	o.Method = &v
}

// GetBodyDataType returns the BodyDataType field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetBodyDataType() string {
	if o == nil || IsNil(o.BodyDataType) {
		var ret string
		return ret
	}
	return *o.BodyDataType
}

// GetBodyDataTypeOk returns a tuple with the BodyDataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetBodyDataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BodyDataType) {
		return nil, false
	}
	return o.BodyDataType, true
}

// HasBodyDataType returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasBodyDataType() bool {
	if o != nil && !IsNil(o.BodyDataType) {
		return true
	}

	return false
}

// SetBodyDataType gets a reference to the given string and assigns it to the BodyDataType field.
func (o *IntegrationMatcherRequest) SetBodyDataType(v string) {
	o.BodyDataType = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *IntegrationMatcherRequest) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *IntegrationMatcherRequest) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IntegrationMatcherRequest) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *IntegrationMatcherRequest) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *IntegrationMatcherRequest) SetValue(v string) {
	o.Value = &v
}

func (o IntegrationMatcherRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationMatcherRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.MatchType) {
		toSerialize["match_type"] = o.MatchType
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.BodyDataType) {
		toSerialize["body_data_type"] = o.BodyDataType
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableIntegrationMatcherRequest struct {
	value *IntegrationMatcherRequest
	isSet bool
}

func (v NullableIntegrationMatcherRequest) Get() *IntegrationMatcherRequest {
	return v.value
}

func (v *NullableIntegrationMatcherRequest) Set(val *IntegrationMatcherRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationMatcherRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationMatcherRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationMatcherRequest(val *IntegrationMatcherRequest) *NullableIntegrationMatcherRequest {
	return &NullableIntegrationMatcherRequest{value: val, isSet: true}
}

func (v NullableIntegrationMatcherRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationMatcherRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


