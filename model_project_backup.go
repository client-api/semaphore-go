/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ProjectBackup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBackup{}

// ProjectBackup struct for ProjectBackup
type ProjectBackup struct {
	Meta *ProjectBackupMeta `json:"meta,omitempty"`
	Templates []ProjectBackupTemplatesInner `json:"templates,omitempty"`
	Repositories []ProjectBackupRepositoriesInner `json:"repositories,omitempty"`
	Keys []ProjectBackupKeysInner `json:"keys,omitempty"`
	Views []ProjectBackupViewsInner `json:"views,omitempty"`
	Inventories []ProjectBackupInventoriesInner `json:"inventories,omitempty"`
	Environments []ProjectBackupEnvironmentsInner `json:"environments,omitempty"`
}

// NewProjectBackup instantiates a new ProjectBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBackup() *ProjectBackup {
	this := ProjectBackup{}
	return &this
}

// NewProjectBackupWithDefaults instantiates a new ProjectBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBackupWithDefaults() *ProjectBackup {
	this := ProjectBackup{}
	return &this
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *ProjectBackup) GetMeta() ProjectBackupMeta {
	if o == nil || IsNil(o.Meta) {
		var ret ProjectBackupMeta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetMetaOk() (*ProjectBackupMeta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *ProjectBackup) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given ProjectBackupMeta and assigns it to the Meta field.
func (o *ProjectBackup) SetMeta(v ProjectBackupMeta) {
	o.Meta = &v
}

// GetTemplates returns the Templates field value if set, zero value otherwise.
func (o *ProjectBackup) GetTemplates() []ProjectBackupTemplatesInner {
	if o == nil || IsNil(o.Templates) {
		var ret []ProjectBackupTemplatesInner
		return ret
	}
	return o.Templates
}

// GetTemplatesOk returns a tuple with the Templates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetTemplatesOk() ([]ProjectBackupTemplatesInner, bool) {
	if o == nil || IsNil(o.Templates) {
		return nil, false
	}
	return o.Templates, true
}

// HasTemplates returns a boolean if a field has been set.
func (o *ProjectBackup) HasTemplates() bool {
	if o != nil && !IsNil(o.Templates) {
		return true
	}

	return false
}

// SetTemplates gets a reference to the given []ProjectBackupTemplatesInner and assigns it to the Templates field.
func (o *ProjectBackup) SetTemplates(v []ProjectBackupTemplatesInner) {
	o.Templates = v
}

// GetRepositories returns the Repositories field value if set, zero value otherwise.
func (o *ProjectBackup) GetRepositories() []ProjectBackupRepositoriesInner {
	if o == nil || IsNil(o.Repositories) {
		var ret []ProjectBackupRepositoriesInner
		return ret
	}
	return o.Repositories
}

// GetRepositoriesOk returns a tuple with the Repositories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetRepositoriesOk() ([]ProjectBackupRepositoriesInner, bool) {
	if o == nil || IsNil(o.Repositories) {
		return nil, false
	}
	return o.Repositories, true
}

// HasRepositories returns a boolean if a field has been set.
func (o *ProjectBackup) HasRepositories() bool {
	if o != nil && !IsNil(o.Repositories) {
		return true
	}

	return false
}

// SetRepositories gets a reference to the given []ProjectBackupRepositoriesInner and assigns it to the Repositories field.
func (o *ProjectBackup) SetRepositories(v []ProjectBackupRepositoriesInner) {
	o.Repositories = v
}

// GetKeys returns the Keys field value if set, zero value otherwise.
func (o *ProjectBackup) GetKeys() []ProjectBackupKeysInner {
	if o == nil || IsNil(o.Keys) {
		var ret []ProjectBackupKeysInner
		return ret
	}
	return o.Keys
}

// GetKeysOk returns a tuple with the Keys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetKeysOk() ([]ProjectBackupKeysInner, bool) {
	if o == nil || IsNil(o.Keys) {
		return nil, false
	}
	return o.Keys, true
}

// HasKeys returns a boolean if a field has been set.
func (o *ProjectBackup) HasKeys() bool {
	if o != nil && !IsNil(o.Keys) {
		return true
	}

	return false
}

// SetKeys gets a reference to the given []ProjectBackupKeysInner and assigns it to the Keys field.
func (o *ProjectBackup) SetKeys(v []ProjectBackupKeysInner) {
	o.Keys = v
}

// GetViews returns the Views field value if set, zero value otherwise.
func (o *ProjectBackup) GetViews() []ProjectBackupViewsInner {
	if o == nil || IsNil(o.Views) {
		var ret []ProjectBackupViewsInner
		return ret
	}
	return o.Views
}

// GetViewsOk returns a tuple with the Views field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetViewsOk() ([]ProjectBackupViewsInner, bool) {
	if o == nil || IsNil(o.Views) {
		return nil, false
	}
	return o.Views, true
}

// HasViews returns a boolean if a field has been set.
func (o *ProjectBackup) HasViews() bool {
	if o != nil && !IsNil(o.Views) {
		return true
	}

	return false
}

// SetViews gets a reference to the given []ProjectBackupViewsInner and assigns it to the Views field.
func (o *ProjectBackup) SetViews(v []ProjectBackupViewsInner) {
	o.Views = v
}

// GetInventories returns the Inventories field value if set, zero value otherwise.
func (o *ProjectBackup) GetInventories() []ProjectBackupInventoriesInner {
	if o == nil || IsNil(o.Inventories) {
		var ret []ProjectBackupInventoriesInner
		return ret
	}
	return o.Inventories
}

// GetInventoriesOk returns a tuple with the Inventories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetInventoriesOk() ([]ProjectBackupInventoriesInner, bool) {
	if o == nil || IsNil(o.Inventories) {
		return nil, false
	}
	return o.Inventories, true
}

// HasInventories returns a boolean if a field has been set.
func (o *ProjectBackup) HasInventories() bool {
	if o != nil && !IsNil(o.Inventories) {
		return true
	}

	return false
}

// SetInventories gets a reference to the given []ProjectBackupInventoriesInner and assigns it to the Inventories field.
func (o *ProjectBackup) SetInventories(v []ProjectBackupInventoriesInner) {
	o.Inventories = v
}

// GetEnvironments returns the Environments field value if set, zero value otherwise.
func (o *ProjectBackup) GetEnvironments() []ProjectBackupEnvironmentsInner {
	if o == nil || IsNil(o.Environments) {
		var ret []ProjectBackupEnvironmentsInner
		return ret
	}
	return o.Environments
}

// GetEnvironmentsOk returns a tuple with the Environments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackup) GetEnvironmentsOk() ([]ProjectBackupEnvironmentsInner, bool) {
	if o == nil || IsNil(o.Environments) {
		return nil, false
	}
	return o.Environments, true
}

// HasEnvironments returns a boolean if a field has been set.
func (o *ProjectBackup) HasEnvironments() bool {
	if o != nil && !IsNil(o.Environments) {
		return true
	}

	return false
}

// SetEnvironments gets a reference to the given []ProjectBackupEnvironmentsInner and assigns it to the Environments field.
func (o *ProjectBackup) SetEnvironments(v []ProjectBackupEnvironmentsInner) {
	o.Environments = v
}

func (o ProjectBackup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBackup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Templates) {
		toSerialize["templates"] = o.Templates
	}
	if !IsNil(o.Repositories) {
		toSerialize["repositories"] = o.Repositories
	}
	if !IsNil(o.Keys) {
		toSerialize["keys"] = o.Keys
	}
	if !IsNil(o.Views) {
		toSerialize["views"] = o.Views
	}
	if !IsNil(o.Inventories) {
		toSerialize["inventories"] = o.Inventories
	}
	if !IsNil(o.Environments) {
		toSerialize["environments"] = o.Environments
	}
	return toSerialize, nil
}

type NullableProjectBackup struct {
	value *ProjectBackup
	isSet bool
}

func (v NullableProjectBackup) Get() *ProjectBackup {
	return v.value
}

func (v *NullableProjectBackup) Set(val *ProjectBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBackup(val *ProjectBackup) *NullableProjectBackup {
	return &NullableProjectBackup{value: val, isSet: true}
}

func (v NullableProjectBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


