/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the ProjectBackupRepositoriesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProjectBackupRepositoriesInner{}

// ProjectBackupRepositoriesInner struct for ProjectBackupRepositoriesInner
type ProjectBackupRepositoriesInner struct {
	Name *string `json:"name,omitempty"`
	GitUrl *string `json:"git_url,omitempty"`
	GitBranch *string `json:"git_branch,omitempty"`
	SshKey *string `json:"ssh_key,omitempty"`
}

// NewProjectBackupRepositoriesInner instantiates a new ProjectBackupRepositoriesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProjectBackupRepositoriesInner() *ProjectBackupRepositoriesInner {
	this := ProjectBackupRepositoriesInner{}
	return &this
}

// NewProjectBackupRepositoriesInnerWithDefaults instantiates a new ProjectBackupRepositoriesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProjectBackupRepositoriesInnerWithDefaults() *ProjectBackupRepositoriesInner {
	this := ProjectBackupRepositoriesInner{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ProjectBackupRepositoriesInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupRepositoriesInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ProjectBackupRepositoriesInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ProjectBackupRepositoriesInner) SetName(v string) {
	o.Name = &v
}

// GetGitUrl returns the GitUrl field value if set, zero value otherwise.
func (o *ProjectBackupRepositoriesInner) GetGitUrl() string {
	if o == nil || IsNil(o.GitUrl) {
		var ret string
		return ret
	}
	return *o.GitUrl
}

// GetGitUrlOk returns a tuple with the GitUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupRepositoriesInner) GetGitUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitUrl) {
		return nil, false
	}
	return o.GitUrl, true
}

// HasGitUrl returns a boolean if a field has been set.
func (o *ProjectBackupRepositoriesInner) HasGitUrl() bool {
	if o != nil && !IsNil(o.GitUrl) {
		return true
	}

	return false
}

// SetGitUrl gets a reference to the given string and assigns it to the GitUrl field.
func (o *ProjectBackupRepositoriesInner) SetGitUrl(v string) {
	o.GitUrl = &v
}

// GetGitBranch returns the GitBranch field value if set, zero value otherwise.
func (o *ProjectBackupRepositoriesInner) GetGitBranch() string {
	if o == nil || IsNil(o.GitBranch) {
		var ret string
		return ret
	}
	return *o.GitBranch
}

// GetGitBranchOk returns a tuple with the GitBranch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupRepositoriesInner) GetGitBranchOk() (*string, bool) {
	if o == nil || IsNil(o.GitBranch) {
		return nil, false
	}
	return o.GitBranch, true
}

// HasGitBranch returns a boolean if a field has been set.
func (o *ProjectBackupRepositoriesInner) HasGitBranch() bool {
	if o != nil && !IsNil(o.GitBranch) {
		return true
	}

	return false
}

// SetGitBranch gets a reference to the given string and assigns it to the GitBranch field.
func (o *ProjectBackupRepositoriesInner) SetGitBranch(v string) {
	o.GitBranch = &v
}

// GetSshKey returns the SshKey field value if set, zero value otherwise.
func (o *ProjectBackupRepositoriesInner) GetSshKey() string {
	if o == nil || IsNil(o.SshKey) {
		var ret string
		return ret
	}
	return *o.SshKey
}

// GetSshKeyOk returns a tuple with the SshKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProjectBackupRepositoriesInner) GetSshKeyOk() (*string, bool) {
	if o == nil || IsNil(o.SshKey) {
		return nil, false
	}
	return o.SshKey, true
}

// HasSshKey returns a boolean if a field has been set.
func (o *ProjectBackupRepositoriesInner) HasSshKey() bool {
	if o != nil && !IsNil(o.SshKey) {
		return true
	}

	return false
}

// SetSshKey gets a reference to the given string and assigns it to the SshKey field.
func (o *ProjectBackupRepositoriesInner) SetSshKey(v string) {
	o.SshKey = &v
}

func (o ProjectBackupRepositoriesInner) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProjectBackupRepositoriesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.GitUrl) {
		toSerialize["git_url"] = o.GitUrl
	}
	if !IsNil(o.GitBranch) {
		toSerialize["git_branch"] = o.GitBranch
	}
	if !IsNil(o.SshKey) {
		toSerialize["ssh_key"] = o.SshKey
	}
	return toSerialize, nil
}

type NullableProjectBackupRepositoriesInner struct {
	value *ProjectBackupRepositoriesInner
	isSet bool
}

func (v NullableProjectBackupRepositoriesInner) Get() *ProjectBackupRepositoriesInner {
	return v.value
}

func (v *NullableProjectBackupRepositoriesInner) Set(val *ProjectBackupRepositoriesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableProjectBackupRepositoriesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableProjectBackupRepositoriesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProjectBackupRepositoriesInner(val *ProjectBackupRepositoriesInner) *NullableProjectBackupRepositoriesInner {
	return &NullableProjectBackupRepositoriesInner{value: val, isSet: true}
}

func (v NullableProjectBackupRepositoriesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProjectBackupRepositoriesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


