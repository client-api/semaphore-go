/*
Semaphore API

Semaphore API provides endpoints for managing and interacting with the Semaphore UI. This documentation outlines the available operations and data models. 

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package semaphore

import (
	"encoding/json"
)

// checks if the AccessKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccessKeyRequest{}

// AccessKeyRequest struct for AccessKeyRequest
type AccessKeyRequest struct {
	Id *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	ProjectId *int32 `json:"project_id,omitempty"`
	OverrideSecret *bool `json:"override_secret,omitempty"`
	LoginPassword *AccessKeyRequestLoginPassword `json:"login_password,omitempty"`
	Ssh *AccessKeyRequestSsh `json:"ssh,omitempty"`
}

// NewAccessKeyRequest instantiates a new AccessKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessKeyRequest() *AccessKeyRequest {
	this := AccessKeyRequest{}
	return &this
}

// NewAccessKeyRequestWithDefaults instantiates a new AccessKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessKeyRequestWithDefaults() *AccessKeyRequest {
	this := AccessKeyRequest{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *AccessKeyRequest) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccessKeyRequest) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *AccessKeyRequest) SetType(v string) {
	o.Type = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetProjectId() int32 {
	if o == nil || IsNil(o.ProjectId) {
		var ret int32
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetProjectIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given int32 and assigns it to the ProjectId field.
func (o *AccessKeyRequest) SetProjectId(v int32) {
	o.ProjectId = &v
}

// GetOverrideSecret returns the OverrideSecret field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetOverrideSecret() bool {
	if o == nil || IsNil(o.OverrideSecret) {
		var ret bool
		return ret
	}
	return *o.OverrideSecret
}

// GetOverrideSecretOk returns a tuple with the OverrideSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetOverrideSecretOk() (*bool, bool) {
	if o == nil || IsNil(o.OverrideSecret) {
		return nil, false
	}
	return o.OverrideSecret, true
}

// HasOverrideSecret returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasOverrideSecret() bool {
	if o != nil && !IsNil(o.OverrideSecret) {
		return true
	}

	return false
}

// SetOverrideSecret gets a reference to the given bool and assigns it to the OverrideSecret field.
func (o *AccessKeyRequest) SetOverrideSecret(v bool) {
	o.OverrideSecret = &v
}

// GetLoginPassword returns the LoginPassword field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetLoginPassword() AccessKeyRequestLoginPassword {
	if o == nil || IsNil(o.LoginPassword) {
		var ret AccessKeyRequestLoginPassword
		return ret
	}
	return *o.LoginPassword
}

// GetLoginPasswordOk returns a tuple with the LoginPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetLoginPasswordOk() (*AccessKeyRequestLoginPassword, bool) {
	if o == nil || IsNil(o.LoginPassword) {
		return nil, false
	}
	return o.LoginPassword, true
}

// HasLoginPassword returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasLoginPassword() bool {
	if o != nil && !IsNil(o.LoginPassword) {
		return true
	}

	return false
}

// SetLoginPassword gets a reference to the given AccessKeyRequestLoginPassword and assigns it to the LoginPassword field.
func (o *AccessKeyRequest) SetLoginPassword(v AccessKeyRequestLoginPassword) {
	o.LoginPassword = &v
}

// GetSsh returns the Ssh field value if set, zero value otherwise.
func (o *AccessKeyRequest) GetSsh() AccessKeyRequestSsh {
	if o == nil || IsNil(o.Ssh) {
		var ret AccessKeyRequestSsh
		return ret
	}
	return *o.Ssh
}

// GetSshOk returns a tuple with the Ssh field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessKeyRequest) GetSshOk() (*AccessKeyRequestSsh, bool) {
	if o == nil || IsNil(o.Ssh) {
		return nil, false
	}
	return o.Ssh, true
}

// HasSsh returns a boolean if a field has been set.
func (o *AccessKeyRequest) HasSsh() bool {
	if o != nil && !IsNil(o.Ssh) {
		return true
	}

	return false
}

// SetSsh gets a reference to the given AccessKeyRequestSsh and assigns it to the Ssh field.
func (o *AccessKeyRequest) SetSsh(v AccessKeyRequestSsh) {
	o.Ssh = &v
}

func (o AccessKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccessKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.OverrideSecret) {
		toSerialize["override_secret"] = o.OverrideSecret
	}
	if !IsNil(o.LoginPassword) {
		toSerialize["login_password"] = o.LoginPassword
	}
	if !IsNil(o.Ssh) {
		toSerialize["ssh"] = o.Ssh
	}
	return toSerialize, nil
}

type NullableAccessKeyRequest struct {
	value *AccessKeyRequest
	isSet bool
}

func (v NullableAccessKeyRequest) Get() *AccessKeyRequest {
	return v.value
}

func (v *NullableAccessKeyRequest) Set(val *AccessKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessKeyRequest(val *AccessKeyRequest) *NullableAccessKeyRequest {
	return &NullableAccessKeyRequest{value: val, isSet: true}
}

func (v NullableAccessKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


